추상클래스
	추상 메소드(abstract method)
		추상 메소드는 자식 클래스에서 반드시 오버라이딩해야만 사용할 수 있는 메소드이다.
		자바에서 추상 메소드를 선언하며 사용하는 목적은 추상 메소드가 포함된 클래스를
		상속받는 자식 클래스가 반드시 추상 메소드를 구현하도록 하기 위함이다.
		
		예를 들어 모듈처럼 중복되는 부분이나 공통적인 부분은 미리 다 만들어진 것을 사용하고
		이를 받아 사용하는 쪽에서는 자신에게 필요한 부분만을 재정의하여 사용함으로서 생산성이 향상되고
		배포 등이 쉬워지기 때문이다.
		
		이러한 추상메소드는 선언부만 존재하며 구현부는 작성되어 있지 않다.
		abstract  반환타입 메소드이름();
	자바에서는 하나 이상의 추상 메소드를 포함하는 클래스를 가리켜 추상클래스(abstract class)라 한다.
		이러한 추상 클래스는 객체 지향 프로그래밍에서 중요한 특징인 다형성을 가지는 메소드의 집합을
		정의할 수 있도록 해준다.
		즉 반드시 사용되어야 하는 메소드를 추상 클래스에 추상 메소드로 선언해 놓으면 이 클래스를 상속받는
		모든 클래스에서는 이 추상 메소드를 반드시 재정의 해야 한다.
		
		abstract class 클래스이름 {
   					 ...

   					 abstract 반환타입 메소드이름();
					...
			}
			
		이러한 추상 클래스는 동작이 정의되어 있지 않은 추상 메소드를 포함하고 있으므로 인스턴스를 생성할 수 없다.
		추상 클래스는 먼저 상속을 통해 자식 클래스를 만들고, 만든 자식 클래스의 모든 추상 메소드를 오버라이딩하고
		나서야 비로소 자식 클래스의 인스턴스를 생성할 수 있게 된다.
		추상 클래스는 추상 메소드를 포함하고 있다는 점을 제외하면, 일반 클래스와 모든 점이 같다.
		즉 생성자와 필드, 일반 메소드도 포함할 수 있다.

인터페이스(interface)
	자식 클래스가 여러 부모 클래스를 상속받을 수 있따면, 다양한 동작을 수행할 수 있다는 장점을
	가지게 될 것이다. 하지만 클래스를 이용하며 다중 상속을 할 경우 메소드 출처의 모호성 등 여러가지 
	문제가 있을 수 있다. 
	결정적으로 자바는 다중상속을 지원하지 않는다.
	
	하지만 다중 상속의 이점을 버릴 수 없기에 인터페이스라는 것을 통해 다중상속을 지원한다.
	인터페이스는 다른 클래스를 작성할 떄 기본이 되는 틀을 제공하면서, 다른 클래스 사이의 중간 매개 역할까지 담당하는
	일종의 추상클래스이다. 
	
	자바에서 추상 클래스는 추상 메소드 뿐만 아니라 생성자,필드,일반 메소드도 포함할 수 있다.
	하지만 인터페이스는 오로지 추상메소드와 상수만을 포함할 수 있다.
	
	인터페이스는 클래스와 달리 인터페이스의 모든 필드는 
	public static final이어야 하며
	모든 메소드는
	public abstract 이어야 한다. ex) public abstract void cry();
	이 부분은 모든 인터페이스에 공통으로 적용되는 부분이므로 제어자는 생략 가능
	생략된 제어자는 컴파일 시 자바 컴파일러가 자동으로 추가