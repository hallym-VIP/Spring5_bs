다형성(polumorphism)
	다형성이란 하나의 객체가 여러가지 타입을 가질 수 있는 것을 의미
	자바에서는 이러한 다형성을 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 
	인스턴스를 참조할 수 있도록 구현함
	ex)Parent pa = new Parent(); // 허용

		Child ch = new Child();   // 허용

		Parent pc = new Child();  // 허용

		Child cp = new Parent();  // 오류 발생.
	참조변수의 타입 변환
	-자바에서는 참조 변수도 다음과 같은 조건에 따라 타입 변환을 할 수 있다.
	1. 서로 상속 관계에 있는 클래스 사이에만 타입 변환을 할 수 있음
	2.자식 클래스 타입에서 부모 클래스 타입으로의 타입 변환은 생략할 수 있음
	3.하지만 부모 클래스 타입에서 자식 클래스 타입으로의 타입변환은 반드시 명시해야함
	
	ex)
	class Parent { ... }
	class Child extends Parent { ... }
	class Brother extends Parent { ... }

	Parent pa01 = null;
	Child ch = new Child();
	Parent pa02 = new Parent();
	Brother br = null;

	pa01 = ch;          // pa01 = (Parent)ch; 와 같으며, 타입 변환을 생략할 수 있음.
	br = (Brother)pa02; // 타입 변환을 생략할 수 없음.
	br = (Brother)ch;   // 직접적인 상속 관계가 아니므로, 오류 발생.

instanceof
	이런 다형성으로 인해 런타임에 참조 변수가 실제로 참조하고 있는 인스턴스의 타입을 확인할 
	필요성이 생김
	참조변수 instanceof 클래스이름 -이런식으로 사용
	
	 System.out.println(number instanceof Object); // true
IOC(Inversion of Control)
	모든 작업을 사용하는 쪽에서 제어하게 되면서 Ioc컨테이너에서 제어하게 되는데
	기본적으로 컨테이너는 객체를 생성하고 객체간의 의존성을 이어주는 역할을 한다.
	Spring Container는 어플리케이션을 구성하는 Bean들을 관리하기 위해
 	IoC(Inversion of Control, 제어의 역전)라는 개념을 이용


1)BeanFactory
	BeanFactory 인터페이스는 Ioc컨테이터의 기능을 정의하고 있는 인터페이스이며
	Bean의 생성 및 의존성 주입,생명주기(lifecycle)관리 등의 기능을 제공한다.
	Bean은 Ioc컨테이너에 의해 생성되고 관리되는 객체를 의미한다.
2)ApplicationContext
	BeanFactory 인터페이스를 상속받는 ApplicationContext는 BeanFactory가
	제공하는 기능 외에 AOP,메세지 처리 이벤트 처리 등의 기능을 제공한다.
	모든 Application 구현체는 BeanFactory의 기능을 모두 제공하므로 특별한 경우를
	제외하고는 ApplicationContext를 사용하는 것이 좋다.
	
ApplicationContext context = 
		new ClassPathXmlApplicationContext("config/bean.xml");
MyBean bean = context.getBean("myBean");
-이 예시는 xml파일을 사용할 때 사용법임