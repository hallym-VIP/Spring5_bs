다형성(polumorphism)
	다형성이란 하나의 객체가 여러가지 타입을 가질 수 있는 것을 의미
	자바에서는 이러한 다형성을 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 
	인스턴스를 참조할 수 있도록 구현함
	ex)Parent pa = new Parent(); // 허용

		Child ch = new Child();   // 허용

		Parent pc = new Child();  // 허용

		Child cp = new Parent();  // 오류 발생.
	참조변수의 타입 변환
	-자바에서는 참조 변수도 다음과 같은 조건에 따라 타입 변환을 할 수 있다.
	1. 서로 상속 관계에 있는 클래스 사이에만 타입 변환을 할 수 있음
	2.자식 클래스 타입에서 부모 클래스 타입으로의 타입 변환은 생략할 수 있음
	3.하지만 부모 클래스 타입에서 자식 클래스 타입으로의 타입변환은 반드시 명시해야함
	
	ex)
	class Parent { ... }
	class Child extends Parent { ... }
	class Brother extends Parent { ... }

	Parent pa01 = null;
	Child ch = new Child();
	Parent pa02 = new Parent();
	Brother br = null;

	pa01 = ch;          // pa01 = (Parent)ch; 와 같으며, 타입 변환을 생략할 수 있음.
	br = (Brother)pa02; // 타입 변환을 생략할 수 없음.
	br = (Brother)ch;   // 직접적인 상속 관계가 아니므로, 오류 발생.

instanceof
	이런 다형성으로 인해 런타임에 참조 변수가 실제로 참조하고 있는 인스턴스의 타입을 확인할 
	필요성이 생김
	참조변수 instanceof 클래스이름 -이런식으로 사용
	
	 System.out.println(number instanceof Object); // true
IOC(Inversion of Control)
	모든 작업을 사용하는 쪽에서 제어하게 되면서 Ioc컨테이너에서 제어하게 되는데
	기본적으로 컨테이너는 객체를 생성하고 객체간의 의존성을 이어주는 역할을 한다.
	Spring Container는 어플리케이션을 구성하는 Bean들을 관리하기 위해
 	IoC(Inversion of Control, 제어의 역전)라는 개념을 이용


1)BeanFactory
	BeanFactory 인터페이스는 Ioc컨테이터의 기능을 정의하고 있는 인터페이스이며
	Bean의 생성 및 의존성 주입,생명주기(lifecycle)관리 등의 기능을 제공한다.
	Bean은 Ioc컨테이너에 의해 생성되고 관리되는 객체를 의미한다.
2)ApplicationContext
	BeanFactory 인터페이스를 상속받는 ApplicationContext는 BeanFactory가
	제공하는 기능 외에 AOP,메세지 처리 이벤트 처리 등의 기능을 제공한다.
	모든 Application 구현체는 BeanFactory의 기능을 모두 제공하므로 특별한 경우를
	제외하고는 ApplicationContext를 사용하는 것이 좋다.
	
ApplicationContext context = 
		new ClassPathXmlApplicationContext("config/bean.xml");
MyBean bean = context.getBean("myBean");
-이 예시는 xml파일을 사용할 때 사용법임



DI 방식들
-생성자 방식: 빈 객체를 생성하는 시점에 모든 의존 객체가 주입된다.
-설정 메서드 방식: 세터 메서드 이름을 통해 어떤 의존 객체가 주입되는지 알 수 있다.

컨테이너- 의존관계 주입을 대신 객체를 생성하고 관리하면서 의존관계를 연결해주는 것
스프링 컨테이너는 자동 주입, 라이프사이클 관리 등 단순 객체 생성 외에 객체 관리를 위한 다양한 기능을 제공하는데 빈으로 등록한 객체에만 기능을 적용
스프링 컨테이너가 제공하는 관리 기능이 필요 없고 getBean() 메서드로 구할 피룡가 없다면 빈 객체로 꼭 등록해야 하는 것은 아니다.
스프링 컨테이너는 설정 클래스에서 사용한 @Autowired에 대해서도 자동 주입을 처리한다. 
실제로 스프링은 @Configuration 애노테이션이 붙은 설정 클래스를 내부적으로 스프링 빈으로 등록한다.
다른 빈과 마찬가지로 @Autowired 가 붙은 대상에 대해 알맞은 빈을 자동으로 주입한다. 
즉 스프링 컨테이너는 AppConf2객체를 빈으로 등록하고 @Autowired 애노테이션이 붙은
@Autowired 애노테이션을 필드나 세터 메서드에 붙이면  스프링은 타입이 일치하는 빈 객체를 찾아서 주입한다.

자동 주입 가능한 빈이 두 개 이상이면 자동 주입할 빈을 지정할 수 있는 방법이 필요하다
이때 @Qualifier 애노테이션을 사용한다.
@Qualifier 애노테이션을 사용하면 자동 주입 대상 빈을 한정할 수 있다.
@Qualifier 애노테이션은 두 위치에서 사용 간으하다 첫 번째는 @Bean 애노테이션을 붙인 빈 설정 메서드이다. -여기서 이름지정 
두 번째는 주입 받을 곳이다. 여기서 위에서 만든 한정된 이름을 사용하여 지정한다.
@Qualifier 애노테이션이 없다면 빈의 이름이 한정자가 된다.
@Autowired 애토테이션의 required 속성을 false로 지정하면 매치오디는 빈이 없어도 익셉션이 발생하지 않으며 자동 주입을 수행하지 않는다.

@Autowired 애노테이션의 required 속성을 false로 할 떄와 차이점은 
@Nullable 애노테이션을 사용하면 자동 주입할 빈이 존재하지 않아도 메서드가 호출된다는 점이다.

